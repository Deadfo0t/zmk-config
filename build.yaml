# This file generates the GitHub Actions matrix
# For simple board + shield combinations, add them
# to the top level board and shield arrays, for more
# control, add individual board + shield combinations to
# the `include` property, e.g:
#
# board: [ "nice_nano_v2" ]
# shield: [ "corne_left", "corne_right" ]
# include:
#   - board: bdn9_rev2
#   - board: nice_nano_v2
#     shield: reviung41
#
---
#include "config.h"
#include "quantum.h"
#include "oled.h"
#include "rgb.h"
#include "action_layer.h"
#include "encoder.h"

// OLED settings
oled_rotation_t oled_rotation = OLED_ROTATION_180; // Adjust the rotation if necessary

// Define encoder IDs
#define ENCODER_LEFT 0
#define ENCODER_RIGHT 1

// Define keycodes
enum custom_keycodes {
  PAGE_UP = SAFE_RANGE,
  PAGE_DOWN,
  OLED_SCROLL_LEFT,
  OLED_SCROLL_RIGHT,
};

// Define OLED pages
enum oled_pages {
  PAGE_1,
  PAGE_2,
  PAGE_3,
  PAGE_4,
  PAGE_COUNT, // Number of OLED pages
};

// Define custom keycodes
#define KC_PGUP PAGE_UP
#define KC_PGDN PAGE_DOWN
#define KC_OSL  OLED_SCROLL_LEFT
#define KC_OSR  OLED_SCROLL_RIGHT

// Define OLED update function
void update_oled_user(void) {
  switch (get_highest_layer(layer_state)) {
    case 0:
      oled_set_cursor(0, 0);
      oled_write_P(PSTR("Layer 0"), false);
      break;
    case 1:
      oled_set_cursor(0, 0);
      oled_write_P(PSTR("Layer 1"), false);
      break;
    case 2:
      oled_set_cursor(0, 0);
      oled_write_P(PSTR("Layer 2"), false);
      break;
  }

  switch (oled_page) {
    case PAGE_1:
      oled_set_cursor(0, 1);
      oled_write_P(PSTR("Page 1"), false);
      break;
    case PAGE_2:
      oled_set_cursor(0, 1);
      oled_write_P(PSTR("Page 2"), false);
      break;
    case PAGE_3:
      oled_set_cursor(0, 1);
      oled_write_P(PSTR("Page 3"), false);
      break;
    case PAGE_4:
      oled_set_cursor(0, 1);
      oled_write_P(PSTR("Page 4"), false);
      break;
  }

  oled_update();
}

// Encoder event handler
void encoder_update_user(uint8_t index, bool clockwise) {
  switch (index) {
    case ENCODER_LEFT:
      if (clockwise) {
        tap_code(KC_OSR); // Scroll OLED pages to the right
      } else {
        tap_code(KC_OSL); // Scroll OLED pages to the left
      }
      break;
    case ENCODER_RIGHT:
      if (clockwise) {
        tap_code(KC_PGDN); // Page Down
      } else {
        tap_code(KC_PGUP); // Page Up
      }
      break;
  }
}

// Keymap
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [0] = LAYOUT(
        KC_1,   KC_2,   KC_3,   KC_4,   KC_5,   KC_6,   KC_7,   KC_8,   KC_9,   KC_0,
        KC_Q,   KC_W,   KC_E,   KC_R,   KC_T,   KC_Y,   KC_U,   KC_I,   KC_O,   KC_P,
        KC_A,   KC_S,   KC_D,   KC_F,   KC_G,  
